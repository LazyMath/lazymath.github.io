import{s as re,d as se,o as W,e as X,c as G,n as ae}from"../chunks/scheduler.6db7f009.js";import{S as le,i as ce,g as h,s as C,r as pe,h as g,j as P,x as V,c as L,f as d,u as ue,k as D,a as w,y as m,v as me,d as fe,t as de,C as K,w as be,m as I,e as O,n as U,l as ve}from"../chunks/index.73c2b774.js";import{e as R,C as he}from"../chunks/chat-bot.cc82af84.js";import{d as J}from"../chunks/store.2bb96080.js";function Z(l,e,o){const t=l.slice();return t[20]=e[o],t[22]=o,t}function ee(l,e,o){const t=l.slice();return t[23]=e[o],t[25]=o,t}function ne(l,e,o){const t=l.slice();return t[26]=e[o],t[28]=o,t}function ge(l){let e,o,t="Syntax: ",s=l[23].syntax+"",b,r,f,y="<b>Example:</b>",p,i,a,n,_,c,x,k;return{c(){e=h("p"),o=h("b"),o.textContent=t,b=I(s),r=C(),f=h("p"),f.innerHTML=y,p=C(),i=h("img"),n=C(),_=h("br"),c=C(),x=h("img"),this.h()},l(u){e=g(u,"P",{});var v=P(e);o=g(v,"B",{"data-svelte-h":!0}),V(o)!=="svelte-17al1vv"&&(o.textContent=t),b=U(v,s),v.forEach(d),r=L(u),f=g(u,"P",{"data-svelte-h":!0}),V(f)!=="svelte-1pdkta5"&&(f.innerHTML=y),p=L(u),i=g(u,"IMG",{class:!0,src:!0,alt:!0}),n=L(u),_=g(u,"BR",{}),c=L(u),x=g(u,"IMG",{class:!0,src:!0,alt:!0}),this.h()},h(){D(i,"class","disp-img-2"),G(i.src,a="/images/"+l[23].img+"-example.png")||D(i,"src",a),D(i,"alt","udf_img_example"),D(x,"class","disp-img"),G(x.src,k="/images/"+l[23].img+".png")||D(x,"src",k),D(x,"alt","udf_img")},m(u,v){w(u,e,v),m(e,o),m(e,b),w(u,r,v),w(u,f,v),w(u,p,v),w(u,i,v),w(u,n,v),w(u,_,v),w(u,c,v),w(u,x,v)},p:ae,d(u){u&&(d(e),d(r),d(f),d(p),d(i),d(n),d(_),d(c),d(x))}}}function ye(l){let e,o=R(l[3][l[23].index]),t=[];for(let s=0;s<o.length;s+=1)t[s]=te(ne(l,o,s));return{c(){for(let s=0;s<t.length;s+=1)t[s].c();e=O()},l(s){for(let b=0;b<t.length;b+=1)t[b].l(s);e=O()},m(s,b){for(let r=0;r<t.length;r+=1)t[r]&&t[r].m(s,b);w(s,e,b)},p(s,b){if(b&9){o=R(s[3][s[23].index]);let r;for(r=0;r<o.length;r+=1){const f=ne(s,o,r);t[r]?t[r].p(f,b):(t[r]=te(f),t[r].c(),t[r].m(e.parentNode,e))}for(;r<t.length;r+=1)t[r].d(1);t.length=o.length}},d(s){s&&d(e),K(t,s)}}}function te(l){let e,o,t,s,b=l[28]+1+"",r,f,y=l[26].function+"",p,i,a,n,_="Syntax: ",c=l[26].syntax+"",x,k,u,v="<b>Example:</b>",S,q,T,M,F,N,E,z,Y,$;return{c(){e=h("details"),o=h("summary"),t=h("b"),s=I("Case "),r=I(b),f=I(": "),p=I(y),i=C(),a=h("p"),n=h("b"),n.textContent=_,x=I(c),k=C(),u=h("p"),u.innerHTML=v,S=C(),q=h("img"),M=C(),F=h("br"),N=C(),E=h("img"),Y=C(),$=h("br"),this.h()},l(A){e=g(A,"DETAILS",{class:!0,style:!0});var B=P(e);o=g(B,"SUMMARY",{class:!0});var Q=P(o);t=g(Q,"B",{});var H=P(t);s=U(H,"Case "),r=U(H,b),f=U(H,": "),p=U(H,y),H.forEach(d),Q.forEach(d),i=L(B),a=g(B,"P",{});var j=P(a);n=g(j,"B",{"data-svelte-h":!0}),V(n)!=="svelte-17al1vv"&&(n.textContent=_),x=U(j,c),j.forEach(d),k=L(B),u=g(B,"P",{"data-svelte-h":!0}),V(u)!=="svelte-1pdkta5"&&(u.innerHTML=v),S=L(B),q=g(B,"IMG",{class:!0,src:!0,alt:!0}),M=L(B),F=g(B,"BR",{}),N=L(B),E=g(B,"IMG",{class:!0,src:!0,alt:!0}),Y=L(B),B.forEach(d),$=g(A,"BR",{}),this.h()},h(){D(o,"class","udf-summary"),D(q,"class","disp-img-2"),G(q.src,T="/images/"+l[23].img+"-"+(l[28]+1)+"-example.png")||D(q,"src",T),D(q,"alt","udf_img_example"),D(E,"class","disp-img"),G(E.src,z="/images/"+l[23].img+"-"+(l[28]+1)+".png")||D(E,"src",z),D(E,"alt","udf_img"),D(e,"class","name no-cursor"),ve(e,"font-size","large")},m(A,B){w(A,e,B),m(e,o),m(o,t),m(t,s),m(t,r),m(t,f),m(t,p),m(e,i),m(e,a),m(a,n),m(a,x),m(e,k),m(e,u),m(e,S),m(e,q),m(e,M),m(e,F),m(e,N),m(e,E),m(e,Y),w(A,$,B)},p:ae,d(A){A&&(d(e),d($))}}}function ie(l){let e,o,t,s=l[23].name+"",b,r,f,y,p="Function: ",i=l[23].purpose+"",a,n,_,c;function x(v,S){return v[2].includes(v[23].img)?ye:ge}let u=x(l)(l);return{c(){e=h("details"),o=h("summary"),t=h("b"),b=I(s),r=C(),f=h("p"),y=h("b"),y.textContent=p,a=I(i),n=C(),u.c(),_=C(),c=h("br"),this.h()},l(v){e=g(v,"DETAILS",{class:!0});var S=P(e);o=g(S,"SUMMARY",{class:!0});var q=P(o);t=g(q,"B",{});var T=P(t);b=U(T,s),T.forEach(d),q.forEach(d),r=L(S),f=g(S,"P",{});var M=P(f);y=g(M,"B",{"data-svelte-h":!0}),V(y)!=="svelte-mid3di"&&(y.textContent=p),a=U(M,i),M.forEach(d),n=L(S),u.l(S),_=L(S),S.forEach(d),c=g(v,"BR",{}),this.h()},h(){D(o,"class","udf-summary"),D(e,"class","name no-cursor udf-infos")},m(v,S){w(v,e,S),m(e,o),m(o,t),m(t,b),m(e,r),m(e,f),m(f,y),m(f,a),m(e,n),u.m(e,null),m(e,_),w(v,c,S)},p(v,S){u.p(v,S)},d(v){v&&(d(e),d(c)),u.d()}}}function oe(l){let e,o=l[20]+"",t,s,b,r,f,y=R(l[0][l[22]]),p=[];for(let i=0;i<y.length;i+=1)p[i]=ie(ee(l,y,i));return{c(){e=h("h3"),t=I(o),s=h("br"),b=h("br"),r=C();for(let i=0;i<p.length;i+=1)p[i].c();f=O(),this.h()},l(i){e=g(i,"H3",{class:!0});var a=P(e);t=U(a,o),a.forEach(d),s=g(i,"BR",{}),b=g(i,"BR",{}),r=L(i);for(let n=0;n<p.length;n+=1)p[n].l(i);f=O(),this.h()},h(){D(e,"class","add_grad_3")},m(i,a){w(i,e,a),m(e,t),w(i,s,a),w(i,b,a),w(i,r,a);for(let n=0;n<p.length;n+=1)p[n]&&p[n].m(i,a);w(i,f,a)},p(i,a){if(a&13){y=R(i[0][i[22]]);let n;for(n=0;n<y.length;n+=1){const _=ee(i,y,n);p[n]?p[n].p(_,a):(p[n]=ie(_),p[n].c(),p[n].m(f.parentNode,f))}for(;n<p.length;n+=1)p[n].d(1);p.length=y.length}},d(i){i&&(d(e),d(s),d(b),d(r),d(f)),K(p,i)}}}function _e(l){let e,o,t,s="<h2>Mathematical Methods UDFs</h2>",b,r,f,y,p,i=R(l[1]),a=[];for(let n=0;n<i.length;n+=1)a[n]=oe(Z(l,i,n));return y=new he({}),{c(){e=h("div"),o=h("div"),t=h("div"),t.innerHTML=s,b=C(),r=h("div");for(let n=0;n<a.length;n+=1)a[n].c();f=C(),pe(y.$$.fragment),this.h()},l(n){e=g(n,"DIV",{class:!0});var _=P(e);o=g(_,"DIV",{class:!0});var c=P(o);t=g(c,"DIV",{class:!0,"data-svelte-h":!0}),V(t)!=="svelte-f5vxiq"&&(t.innerHTML=s),b=L(c),r=g(c,"DIV",{class:!0});var x=P(r);for(let k=0;k<a.length;k+=1)a[k].l(x);x.forEach(d),c.forEach(d),_.forEach(d),f=L(n),ue(y.$$.fragment,n),this.h()},h(){D(t,"class","intro_1"),D(r,"class","mm-udf-info"),D(o,"class","main_display"),D(e,"class","info")},m(n,_){w(n,e,_),m(e,o),m(o,t),m(o,b),m(o,r);for(let c=0;c<a.length;c+=1)a[c]&&a[c].m(r,null);w(n,f,_),me(y,n,_),p=!0},p(n,[_]){if(_&15){i=R(n[1]);let c;for(c=0;c<i.length;c+=1){const x=Z(n,i,c);a[c]?a[c].p(x,_):(a[c]=oe(x),a[c].c(),a[c].m(r,null))}for(;c<a.length;c+=1)a[c].d(1);a.length=i.length}},i(n){p||(fe(y.$$.fragment,n),p=!0)},o(n){de(y.$$.fragment,n),p=!1},d(n){n&&(d(e),d(f)),K(a,n),be(y,n)}}}function xe(l,e,o){let t;return se(l,J,F=>o(4,t=F)),W(()=>{const F=new IntersectionObserver(E=>{E.forEach(z=>{z.isIntersecting&&(z.target.classList.add("show-animate"),z.target.classList.remove("hidden-animate"))})});document.querySelectorAll(".hidden").forEach(E=>F.observe(E))}),W(()=>{document.body.classList.remove("about-theme"),document.body.classList.add("home-theme"),document.body.classList.remove("contact-theme"),document.body.classList.contains("dark-mode")?X(J,t={svg_id:"/sun.svg",logo_id:"/logo-dark.svg",compass_id:"/compass-dark.svg",calc_id:"/calc-icon-dark.svg"},t):X(J,t={svg_id:"/moon.svg",logo_id:"/logo-light.svg",compass_id:"/compass-light.svg",calc_id:"/calc-icon-light.svg"},t)}),[[[{name:"Average Rate of Change (avgroc)",purpose:"Determines the average rate of change of a function",syntax:"avgroc(function, variable, lower, upper)",img:"avgroc"},{name:"Average Value (avgval)",purpose:"Calculates the average value of a function",syntax:"avgval(function, variable, lower, upper)",img:"avgval"},{name:"Bound Area (boundarea)",purpose:"Determines the area bound by two graphs (if any) across their maximal domains",syntax:"boundarea(function1, function2, variable)",img:"boundarea"},{name:"Bound Area with domain (boundaread)",purpose:"Determines the bound area between two functions in a restricted domain",syntax:"boundaread(function1, function2, variable, lower, upper)",img:"boundaread"},{name:"Integral Solve (intsolve)",purpose:"Determines the answer for the integration multiple choice questions",syntax:"intsolve({lower1, upper1, value1, lower2, upper2, value2}, {transformations}, {lower3, upper3})",img:"intsolve",index:0,cases:3},{name:"Newton's Method (newtons)",purpose:"Estimates the root of a function using newton's method",syntax:"newtons(function, variable, x0, iterations)",img:"newtons"},{name:"Number of Roots (nroot)",purpose:"Determines the value(s) of a parameter required for a specified number of roots.",syntax:"nroot(polynomial, variable, parameter, number of roots)",img:"nroot"},{name:"Number of Stationary Points (nstp)",purpose:"Determines the value(s) of a parameter required for a specified number of stationary points.",syntax:"nstp(polynomial, variable, parameter, number of stationary points)",img:"nstp"},{name:"Number of Points of Inflection (npoi)",purpose:"Determines the value(s) of a parameter required for a specified number of points of inflection.",syntax:"npoi(polynomial, variable, parameter, number of points of inflection)",img:"npoi"},{name:"Points of Inflection (pois)",purpose:"Determines the points of inflection of a function",syntax:"pois(function, variable)",img:"pois"},{name:"Sign Table (signtab)",purpose:"Uses a sign table to determine the stationary points of a function and their nature",syntax:"signtab(function, variable)",img:"signtab"},{name:"Stationary Points (stps)",purpose:"Determines the stationary points of a function",syntax:"stps(function, variable)",img:"stps"},{name:"Tangent Solve (tangsolve)",purpose:"Determines the equation of the tangents to a function which pass through a specified point",syntax:"tangsolve(function, variable, x-coordinate, y-coordinate)",img:"tangsolve"},{name:"Trapezoid Approximation (trapapprox)",purpose:"Approximates an integral using the trapezoidal rule",syntax:"trapapprox(function, variable, lower, upper, number of trapezia)",img:"trapapprox"}],[{name:"Continuous Conditional Probability (ccondpr)",purpose:"Determines conditional probability for a continuous distribution",syntax:"ccondpr(Probability Density Function, Lower Bound, Upper Bound)",img:"ccondpr",index:1,cases:2},{name:"Confidence Interval (confint)",purpose:"Determines a confidence interval as well as the z-score, margin of error and standard deviation",syntax:"confint(Sample Size,P_hat, . confidence)",img:"confint"},{name:"Confidence Interval Solve (confintsolve)",purpose:"Determines the sample size, standard deviation or percentage confidence depending on the provided data",syntax:"confintsolve(Lower Bound, Upper Bound, Sample Size or Sample Standard Deviation or . Confidence)",img:"confintsolve"},{name:"Continuous Distribution Information (continfo)",purpose:"Determines the expected value, mean, variance, standard deviation of a continuous probability distribution",syntax:"continfo(function, variable, lower, upper)",img:"continfo"},{name:"Inverse Normal (invnormvals)",purpose:"Determines the left, right and centre possibilities for probability of a distribution",syntax:"invnormvals(mean, standard deviation, probability)",img:"invnormvals"},{name:"Normal Solve (normsolve)",purpose:"Determines the mean and standard deviation for lower and upper type questions",syntax:"normsolve(Lower, Probability of Lower, Upper, Probability of Upper)",img:"normsolve",index:2,cases:5}],[{name:"Binomial Distribution Information (binominfo)",purpose:"Determines the expected value, variance, standard deviation, sample expected value, and sample standard deviation for a binomial distribution",syntax:"binominfo(Sample Size, Probability of Success)",img:"binominfo"},{name:"Binomial Solve (binomsolve)",purpose:"Determines the number of trials required to achieve a certain probability",syntax:"binomsolve(outcome, probability of success, threshold value)",img:"binomsolve"},{name:"Discrete Conditional Probability (dcondpr)",purpose:"Determines conditional probability for a discrete distribution",img:"dcondpr",index:3,cases:3},{name:"Hypergeometric Cumulative Probability Function (hypergeocdf)",purpose:"Determines the probability of selecting items without replacement, but over an interval of outcomes",syntax:"hypergeocdf(sample size, population size, number of successful items, lower bound, upper bound)",img:"hypergeocdf"},{name:"Hypergeometric Probability Density Function (hypergeopdf)",purpose:"Determines the probability of selecting items without replacement, but for specific outcomes",syntax:"hypergeopdf(sample size, population size, number of successful items, outcome)",img:"hypergeopdf"},{name:"Inverse Binomial (invbinomial)",purpose:"Determines the outcome required to achieve the probability",syntax:"invbinomial(number of trials, probability of success, known probability value)",img:"invbinomial"},{name:"Probability Table (prtable)",purpose:"Determines the mean, variance, standard deviation of a probability table",syntax:"prtable({outcomes}, {probabilities})",img:"prtable"},{name:"Sample Distribution Binomial (samplebinom)",purpose:"Determines the distribution for the sample proportion of a binomially distributed sample",syntax:"samplebinom(Sample Size, Probability of Success)",img:"samplebinom"},{name:"Sample Binomial Probability (samplebinompr)",purpose:"Determines the probability for the sample proportion for a binomially distributed sample",syntax:"samplebinompr(Sample Size, Probability of Success, Lower, Upper)",img:"samplebinompr"},{name:"Sample Distribution Hypergeometric (samplehypergeo)",purpose:"Determines the distribution for the sample proportion of a hypergeometrically distributed sample",syntax:"samplehypergeo(Sample Size, Population Size, Number Successful)",img:"samplehypergeo"},{name:"Sample Hypergeometric probability (samplehyppr)",purpose:"Determines the probability for the sample proportion for a hypergeometrically distributed sample",syntax:"samplehyppr(Sample Size, Population Size, Number Successful, Lower, Upper)",img:"samplehyppr"}],[{name:"Asymptotes (asymp)",purpose:"Determines the vertical and horizontal asymptotes of a function",syntax:"asymp(function, variable)",img:"asymp"},{name:"Composite Check (ccheck)",purpose:"Checks whether a composite function is valid, and the maximal domain required for the composite to be valid.",syntax:"ccheck(function 1, function 2)",img:"ccheck"},{name:"Discriminant (discrim)",purpose:"Calculates the discriminant of an inputted quadratic expression",syntax:"discrim(quadratic Expr, variable)",img:"discrim"},{name:"Domain and Range (domrang)",purpose:"Determines the domain and range of a function",syntax:"domrang(function, variable)",img:"domrang"},{name:"Intercepts (intercepts)",purpose:"Finding the x and y intercepts of a function",syntax:"intercepts(function,variable)",img:"intercepts"},{name:"Intersects (intersects)",purpose:"Determines the points of intersection of two functions across their maximal domains.",syntax:"intersects(function1,function2,variable)",img:"intersects"},{name:"Intersects with domain (intersectsd)",purpose:"Determines the points of intersection between two functions in a restricted domain",syntax:"intersectsd(function1, function2, variable, lower, upper)",img:"intersectsd"},{name:"Inverse Function (inverse)",purpose:"Determines the inverse of a function",syntax:"inverse(function, variable, x in domain of f)",img:"inverse"},{name:"Inverse Intersections (invints)",purpose:"Determines the values of a parameter, k, required for a function and its inverse function to have a certain number of intersections",syntax:"invints(function, number of intersections with inverse)",img:"invints",index:9,cases:7},{name:"Angle Between Two Lines (lineang)",purpose:"Determines the angle between two lines in degrees (Assumes CAS in raidans mode)",syntax:"lineang(Line 1, Line 2, Variable)",img:"lineang"},{name:"Unique, None, Infinite Solution (linesolve)",purpose:"Determines when two linear equations will have an unique, none or infinitely many solutions. Note: Equations must be in the form: Ax + By = C , rather than Ax + By + C = 0",syntax:"linesolve(Equation1, Equation2)",img:"linesolve"},{name:"Property Check (pcheck)",purpose:"Determines which function satisfies a specific property",syntax:"pcheck(function, variable, LHS, RHS)",img:"pcheck"},{name:"Point Information (pointinfo)",purpose:"Determines the gradient, perpendicular gradient, line, x and y intercepts of a line, midpoint, distance",syntax:"pointinfo(x1, y1, x2, y2)",img:"pointinfo"},{name:"Polynomial Fit (polyfit)",purpose:"Determines the equation of a polynomial which passes through a set of points.",syntax:"polyfit({x1, y1, x2, y2, ...})",img:"polyfit"},{name:"Transformations (transform)",purpose:"Determines the transformed function after applying certain transformations",syntax:"transform(function, {transformations})",img:"transform"}],[{name:"Column Augment (ca)",purpose:"Converts answer into easily readable matrix form",img:"ca",index:6,cases:2},{name:"Domain Solve (dsolve)",purpose:"Solves equations in a restricted domain",syntax:"dsolve(Equation, Variable, Lower Bound, Upper Bound)",img:"dsolve"},{name:"Graph Information (graphinfo)",purpose:"Determines the endpoints, x-intercepts, y-intercepts, stationary points, points of inflection of a function",img:"graphinfo",index:7,cases:2},{name:"Rewrite (rr)",purpose:"Gets the right hand side of an equation/answer",syntax:"rr(Equation/Answer)",img:"rr"},{name:"Triganometric Solve (tsolve)",purpose:"Gives exact values of circular function equations (Ones which TiNspire cannot properly solve on its own)",img:"tsolve",index:8,cases:2}]],["Calculus","Continuous Probability","Discrete Probability","Functions","Miscellaneous"],["intsolve","ccondpr","normsolve","dcondpr","arclength","surfarea","ca","graphinfo","tsolve","invints"],[[{function:"One integral given, find transformed integral",syntax:"intsolve({lower1,upper1, value1}, {transformations}, {lower2, upper2})"},{function:"Two integrals given, find untransformed integral",syntax:"intsolve({lower1, upper1, value1}, {lower2, upper2, value2}, {lower3, upper3})"},{function:"Two integrals given, find transformed integral",syntax:"intsolve({lower1, upper1, value1, lower2, upper2, value2}, {transformations}, {lower3, upper3})"}],[{function:"Probability density function",syntax:"ccondpr(Probability Density Function, Lower Bound, Upper Bound, Condition 1, Condition 2)"},{function:"Normal Distribution",syntax:"ccondpr(Blank String, Mean, Standard Deviation, Condition 1, Condition 2)"}],[{function:"Both Lower and Upper given",syntax:"normsolve(Lower, Probability of Lower, Upper, Probability of Upper)"},{function:"Lower and Mean given",syntax:"normsolve(Lower, Probability of Lower, Mean, Blank String)"},{function:"Lower and Standard Deviation given",syntax:"normsolve(Lower, Probability of Lower, Blank String, Standard Deviation)"},{function:"Upper and Mean given",syntax:"normsolve(Mean, Blank String, Upper, Probability of Upper)"},{function:"Upper and Standard Deviation given",syntax:"normsolve(Blank String, Standard Deviation, Upper, Probability of Upper)"}],[{function:"Binomial Distribution",syntax:"dcondpr(number of trials, probability of success, condition 1, condition 2)"},{function:"Discrete Probability Table",syntax:"dcondpr({List containing outcomes}, {List containing probabilities}, condition 1, condition 2)"},{function:"Probability Mass Function",syntax:"dcondpr({List containing outcomes}, PMF, condition 1, condition 2)"}],[{function:"Function",syntax:"arclength(Function, Variable, Lower Bound, Upper Bound)",cases:2},{function:"Parametric Equation",syntax:"arclength(Vector, Variable, Lower, Upper)"}],[{function:"Function of x rotated about x-axis",syntax:"surfarea(Function, Variable, Lower Bound, Upper Bound)"},{function:"Function of y rotated about y-axis",syntax:"surfarea(Function, Variable, Lower Bound, Upper Bound)"},{function:"Function of x rotated about y-axis",syntax:"surfarea(Function, y, x-lower, x-upper)"},{function:"Parametric Equation",syntax:"surfarea(Function, t, Lower Bound, Upper Bound)"}],[{function:"One Variable",syntax:"surfarea(Function, t, Lower Bound, Upper Bound)"},{function:"Multiple Variables (Up to 5)",syntax:"ca(Ans, {var1, var2,..., var5}"}],[{function:"Restricted Domain",syntax:"graphinfo(Function, Variable, Lower Bound, Upper Bound)"},{function:"Across Maximal Domain",syntax:"graphinfo(Function, Variable, Blank String, Random Character)"}],[{function:"Trigonometric Equation",syntax:"tsolve(Equation, Variable, Lower Bound, Upper Bound)"},{function:"Trigonometric Inequality",syntax:"tsolve(Inequality, Variable, Lower Bound, Upper Bound)"}],[{function:"Square Root",syntax:"invints(function, number of intersections with inverse)"},{function:"Parabola",syntax:"invints(function, number of intersections with inverse) *You will be prompted to enter an initial condition"},{function:"Exponential",syntax:"invints(function, number of intersections with inverse)"},{function:"Logarithm",syntax:"invints(function, number of intersections with inverse)"},{function:"Hyperbola",syntax:"invints(function, number of intersections with inverse)"},{function:"Simple Cubic (Either 0 or 1 turning points)",syntax:"invints(function, number of intersections with inverse)"},{function:"Complicated Cubic (More than 1 turning point)",syntax:"invints(function, number of intersections with inverse) *You will be prompted to enter the domain"}]]]}class Ce extends le{constructor(e){super(),ce(this,e,xe,_e,re,{})}}export{Ce as component};
