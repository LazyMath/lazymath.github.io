import{s as re,d as se,o as W,e as X,c as N,n as ae}from"../chunks/scheduler.6db7f009.js";import{S as le,i as ce,g,s as C,r as ue,h as b,j as B,x as j,c as V,f,u as pe,k as D,a as w,y as m,v as me,d as de,t as fe,C as Q,w as ve,m as E,e as G,n as k}from"../chunks/index.73c2b774.js";import{e as $,C as he}from"../chunks/chat-bot.2fde26cc.js";import{d as K}from"../chunks/store.2bb96080.js";function Z(l,e,o){const t=l.slice();return t[21]=e[o],t[23]=o,t}function ee(l,e,o){const t=l.slice();return t[24]=e[o],t[26]=o,t}function ne(l,e,o){const t=l.slice();return t[27]=e[o],t[29]=o,t}function ge(l){let e,o,t="Syntax: ",s=l[24].syntax+"",v,r,d,_="<b>Example:</b>",u,i,a,n,y,c,x,q;return{c(){e=g("p"),o=g("b"),o.textContent=t,v=E(s),r=C(),d=g("p"),d.innerHTML=_,u=C(),i=g("img"),n=C(),y=g("br"),c=C(),x=g("img"),this.h()},l(p){e=b(p,"P",{});var h=B(e);o=b(h,"B",{"data-svelte-h":!0}),j(o)!=="svelte-17al1vv"&&(o.textContent=t),v=k(h,s),h.forEach(f),r=V(p),d=b(p,"P",{"data-svelte-h":!0}),j(d)!=="svelte-1pdkta5"&&(d.innerHTML=_),u=V(p),i=b(p,"IMG",{class:!0,src:!0,alt:!0}),n=V(p),y=b(p,"BR",{}),c=V(p),x=b(p,"IMG",{class:!0,src:!0,alt:!0}),this.h()},h(){D(i,"class","disp-img-2"),N(i.src,a="/images/"+l[24].img+"-example.png")||D(i,"src",a),D(i,"alt","udf_img_example"),D(x,"class","disp-img"),N(x.src,q="/images/"+l[24].img+".png")||D(x,"src",q),D(x,"alt","udf_img")},m(p,h){w(p,e,h),m(e,o),m(e,v),w(p,r,h),w(p,d,h),w(p,u,h),w(p,i,h),w(p,n,h),w(p,y,h),w(p,c,h),w(p,x,h)},p:ae,d(p){p&&(f(e),f(r),f(d),f(u),f(i),f(n),f(y),f(c),f(x))}}}function be(l){let e,o=$(l[3][l[24].index]),t=[];for(let s=0;s<o.length;s+=1)t[s]=te(ne(l,o,s));return{c(){for(let s=0;s<t.length;s+=1)t[s].c();e=G()},l(s){for(let v=0;v<t.length;v+=1)t[v].l(s);e=G()},m(s,v){for(let r=0;r<t.length;r+=1)t[r]&&t[r].m(s,v);w(s,e,v)},p(s,v){if(v&9){o=$(s[3][s[24].index]);let r;for(r=0;r<o.length;r+=1){const d=ne(s,o,r);t[r]?t[r].p(d,v):(t[r]=te(d),t[r].c(),t[r].m(e.parentNode,e))}for(;r<t.length;r+=1)t[r].d(1);t.length=o.length}},d(s){s&&f(e),Q(t,s)}}}function te(l){let e,o,t,s,v=l[29]+1+"",r,d,_=l[27].function+"",u,i,a,n,y="Syntax: ",c=l[27].syntax+"",x,q,p,h="<b>Example:</b>",P,M,A,S,Y,F,U,R,I,z;return{c(){e=g("details"),o=g("summary"),t=g("b"),s=E("Case "),r=E(v),d=E(": "),u=E(_),i=C(),a=g("p"),n=g("b"),n.textContent=y,x=E(c),q=C(),p=g("p"),p.innerHTML=h,P=C(),M=g("img"),S=C(),Y=g("br"),F=C(),U=g("img"),I=C(),z=g("br"),this.h()},l(T){e=b(T,"DETAILS",{class:!0});var L=B(e);o=b(L,"SUMMARY",{class:!0});var J=B(o);t=b(J,"B",{});var H=B(t);s=k(H,"Case "),r=k(H,v),d=k(H,": "),u=k(H,_),H.forEach(f),J.forEach(f),i=V(L),a=b(L,"P",{});var O=B(a);n=b(O,"B",{"data-svelte-h":!0}),j(n)!=="svelte-17al1vv"&&(n.textContent=y),x=k(O,c),O.forEach(f),q=V(L),p=b(L,"P",{"data-svelte-h":!0}),j(p)!=="svelte-1pdkta5"&&(p.innerHTML=h),P=V(L),M=b(L,"IMG",{class:!0,src:!0,alt:!0}),S=V(L),Y=b(L,"BR",{}),F=V(L),U=b(L,"IMG",{class:!0,src:!0,alt:!0}),I=V(L),L.forEach(f),z=b(T,"BR",{}),this.h()},h(){D(o,"class","udf-summary"),D(M,"class","disp-img-2"),N(M.src,A="/images/"+l[24].img+"-"+(l[29]+1)+"-example.png")||D(M,"src",A),D(M,"alt","udf_img_example"),D(U,"class","disp-img"),N(U.src,R="/images/"+l[24].img+"-"+(l[29]+1)+".png")||D(U,"src",R),D(U,"alt","udf_img"),D(e,"class","name no-cursor")},m(T,L){w(T,e,L),m(e,o),m(o,t),m(t,s),m(t,r),m(t,d),m(t,u),m(e,i),m(e,a),m(a,n),m(a,x),m(e,q),m(e,p),m(e,P),m(e,M),m(e,S),m(e,Y),m(e,F),m(e,U),m(e,I),w(T,z,L)},p:ae,d(T){T&&(f(e),f(z))}}}function ie(l){let e,o,t,s=l[24].name+"",v,r,d,_,u="Function: ",i=l[24].purpose+"",a,n,y,c;function x(h,P){return h[2].includes(h[24].img)?be:ge}let p=x(l)(l);return{c(){e=g("details"),o=g("summary"),t=g("b"),v=E(s),r=C(),d=g("p"),_=g("b"),_.textContent=u,a=E(i),n=C(),p.c(),y=C(),c=g("br"),this.h()},l(h){e=b(h,"DETAILS",{class:!0});var P=B(e);o=b(P,"SUMMARY",{class:!0});var M=B(o);t=b(M,"B",{});var A=B(t);v=k(A,s),A.forEach(f),M.forEach(f),r=V(P),d=b(P,"P",{});var S=B(d);_=b(S,"B",{"data-svelte-h":!0}),j(_)!=="svelte-mid3di"&&(_.textContent=u),a=k(S,i),S.forEach(f),n=V(P),p.l(P),y=V(P),P.forEach(f),c=b(h,"BR",{}),this.h()},h(){D(o,"class","udf-summary"),D(e,"class","name no-cursor udf-infos")},m(h,P){w(h,e,P),m(e,o),m(o,t),m(t,v),m(e,r),m(e,d),m(d,_),m(d,a),m(e,n),p.m(e,null),m(e,y),w(h,c,P)},p(h,P){p.p(h,P)},d(h){h&&(f(e),f(c)),p.d()}}}function oe(l){let e,o=l[21]+"",t,s,v,r,d,_=$(l[0][l[23]]),u=[];for(let i=0;i<_.length;i+=1)u[i]=ie(ee(l,_,i));return{c(){e=g("h3"),t=E(o),s=g("br"),v=g("br"),r=C();for(let i=0;i<u.length;i+=1)u[i].c();d=G(),this.h()},l(i){e=b(i,"H3",{class:!0});var a=B(e);t=k(a,o),a.forEach(f),s=b(i,"BR",{}),v=b(i,"BR",{}),r=V(i);for(let n=0;n<u.length;n+=1)u[n].l(i);d=G(),this.h()},h(){D(e,"class","add_grad_3")},m(i,a){w(i,e,a),m(e,t),w(i,s,a),w(i,v,a),w(i,r,a);for(let n=0;n<u.length;n+=1)u[n]&&u[n].m(i,a);w(i,d,a)},p(i,a){if(a&13){_=$(i[0][i[23]]);let n;for(n=0;n<_.length;n+=1){const y=ee(i,_,n);u[n]?u[n].p(y,a):(u[n]=ie(y),u[n].c(),u[n].m(d.parentNode,d))}for(;n<u.length;n+=1)u[n].d(1);u.length=_.length}},d(i){i&&(f(e),f(s),f(v),f(r),f(d)),Q(u,i)}}}function _e(l){let e,o,t,s="<h2>Specialist Mathematics UDFs</h2>",v,r,d,_,u,i=$(l[1]),a=[];for(let n=0;n<i.length;n+=1)a[n]=oe(Z(l,i,n));return _=new he({}),{c(){e=g("div"),o=g("div"),t=g("div"),t.innerHTML=s,v=C(),r=g("div");for(let n=0;n<a.length;n+=1)a[n].c();d=C(),ue(_.$$.fragment),this.h()},l(n){e=b(n,"DIV",{class:!0});var y=B(e);o=b(y,"DIV",{class:!0});var c=B(o);t=b(c,"DIV",{class:!0,"data-svelte-h":!0}),j(t)!=="svelte-rm4qgj"&&(t.innerHTML=s),v=V(c),r=b(c,"DIV",{class:!0});var x=B(r);for(let q=0;q<a.length;q+=1)a[q].l(x);x.forEach(f),c.forEach(f),y.forEach(f),d=V(n),pe(_.$$.fragment,n),this.h()},h(){D(t,"class","intro_1"),D(r,"class","sm-udf-info"),D(o,"class","main_display"),D(e,"class","info")},m(n,y){w(n,e,y),m(e,o),m(o,t),m(o,v),m(o,r);for(let c=0;c<a.length;c+=1)a[c]&&a[c].m(r,null);w(n,d,y),me(_,n,y),u=!0},p(n,[y]){if(y&15){i=$(n[1]);let c;for(c=0;c<i.length;c+=1){const x=Z(n,i,c);a[c]?a[c].p(x,y):(a[c]=oe(x),a[c].c(),a[c].m(r,null))}for(;c<a.length;c+=1)a[c].d(1);a.length=i.length}},i(n){u||(de(_.$$.fragment,n),u=!0)},o(n){fe(_.$$.fragment,n),u=!1},d(n){n&&(f(e),f(d)),Q(a,n),ve(_,n)}}}function ye(l,e,o){let t;return se(l,K,F=>o(4,t=F)),W(()=>{const F=new IntersectionObserver(R=>{R.forEach(I=>{I.isIntersecting&&(I.target.classList.add("show-animate"),I.target.classList.remove("hidden-animate"))})});document.querySelectorAll(".hidden").forEach(R=>F.observe(R))}),W(()=>{document.body.classList.remove("about-theme"),document.body.classList.add("home-theme"),document.body.classList.remove("contact-theme"),document.body.classList.contains("dark-mode")?X(K,t={svg_id:"/sun.svg",logo_id:"/logo-dark.svg",compass_id:"/compass-dark.svg",calc_id:"/calc-icon-dark.svg"},t):X(K,t={svg_id:"/moon.svg",logo_id:"/logo-light.svg",compass_id:"/compass-light.svg",calc_id:"/calc-icon-light.svg"},t)}),[[[{name:"Arc Length (arclength)",purpose:"Determines the arc length for parametric curve",syntax:"arclength(Position Vector, Variable, Lower Bound, Upper Bound)",img:"arclength",cases:1,index:4},{name:"Bound Volume (boundvol)",purpose:"Determines the volume of the solid formed by the region(s) bound by two curves",syntax:"boundvol(Function 1, Function 2, Variable)",img:"boundvol"},{name:"Bound Volume Domain (boundvold)",purpose:"Determines the volume of the solid formed by the region(s) bound by two curves in a restricted domain",syntax:"boundvold(Function 1, Function 2, Variable, Lower Bound, Upper Bound)",img:"boundvold"},{name:"Euler's Method (eulers)",purpose:"Uses euler's method to estimate the solution to a differential equation",syntax:"eulers(Differential Equation, Independent Variable, x0, xn, y0, step-size)",img:"eulers"},{name:"Mixing Problems (mix)",purpose:"Determines the differential equation of the mixing problem",syntax:"mix() (You will be prompted for inputs)",img:"mix"},{name:"Rational Function (rational)",purpose:"Determines holes, straight line asymptotes, and oblique asymptotes of a rational function.",syntax:"rational(numerator, denominator, variable)",img:"rational"},{name:"Surface Area of Solid (surfarea)",purpose:"Determines the surface area of a solid of revolution",syntax:"surfarea(Function, Variable, Lower Bound, Upper Bound)",img:"surfarea",cases:3,index:5}],[{name:"De Moivre's Theorem (demoiv)",purpose:"Determines the solutions to roots of unity questions",syntax:"demoiv(Power , Number)",img:"demoiv"},{name:"Circle Locus First Form (locicir1)",purpose:"Determines cartesian equation of circle loci in the form |z - a| = r",syntax:"locicir1(Point , Radius)",img:"locicir1"},{name:"Circle Locus Second Form (locicir2)",purpose:"Determines cartesian equation of circle loci in the form |z - a| = k|z - b|",syntax:"locicir2(Point 1, Point 2, k)",img:"locicir2"},{name:"Ellipse Locus (lociellp)",purpose:"Determines cartesian equation of ellipse loci",syntax:"lociellp(Point 1, Point 2, Length)",img:"lociellp"},{name:"Hyperbola Locus (locihyp)",purpose:"Determines cartesian equation of hyperbola loci",syntax:"locihyp(Point 1, Point 2, Length)",img:"locihyp"},{name:"Line Locus (lociline)",purpose:"Determines cartesian equation of line in the form |z - a| = |z - b|",syntax:"lociline(Point 1, Point 2)",img:"lociline"},{name:"Quadratic Roots (quadroots)",purpose:"Determines quadratic roots of a complex number algebraically",syntax:"quadroots(Number)",img:"quadroots"},{name:"Ray (ray)",purpose:"Determines the cartesian equation of a ray given a point and an angle",syntax:"ray(Point, Angle)",img:"ray"}],[{name:"Collision Detector (collision)",purpose:"Determines whether two particles collide and where their paths intersect",syntax:"collision(Position Vector 1, Position Vector 2)",img:"collision"},{name:"Projectile Motion (projm)",purpose:"Determines the accleration, velocity, position, max height, max displacement, return speed of a particle",syntax:"projm(Initial Position, Initial Velocity, Launch Angle, Initial Acceleration)",img:"projm"},{name:"Constant Acceleration Equations (suvat)",purpose:"Enter 3 known values and 2 unknown variables, it will determine the unknowns",syntax:"suvat(s (displacement), u (initial velocity), v (final velocity), a (acceleration), t (time))",img:"suvat"}],[{name:"Unit Vector Bisector (bisec)",purpose:"Determines the unit vector which bisects the angle between two vectors",syntax:"bisec(vector 1, vector 2)",img:"bisec"},{name:"Colinear (colin)",purpose:"Determines value(s) of a variable required for points to be collinear",syntax:"colin(Point 1, Point 2, Point 3)",img:"colin"},{name:"Linear Dependence (lindep)",purpose:"Determines value(s) of a variable required for 3 vectors to be linearly dependent",syntax:"lindep(Vector 1, Vector 2, Vector 3)",img:"lindep"},{name:"Angle between Vectors (vecang)",purpose:"Determines the angle between the two inputted vectors.",syntax:"vecang(Vector1, Vector2)",img:"vecang"},{name:"Vector Projection (vproj)",purpose:"Determines vector, scalar resolute, & angle for two inputted vectors",syntax:"vproj(Vector 1, Vector 2)",img:"vproj"}],[{name:"Line Cartesian to Vector (car2vecline)",purpose:"Converts equation of line from cartesian form to vector form",syntax:"car2vecline(line Cartesian)",img:"car2vecline"},{name:"Plane Cartesian to Vector (car2vecplane)",purpose:"Converts equation of plane from cartesian form to vector form",syntax:"car2vecplane(Plane Cartesian)",img:"car2vecplane"},{name:"Line Vector to Cartesian (vec2carline)",purpose:"Converts equation of line from vector form to cartesian form",syntax:"vec2carline(line Vector)",img:"vec2carline"},{name:"Plane Vector to Cartesian (vec2carplane)",purpose:"Converts equation of plane from vector form to cartesian form",syntax:"vec2carplane(Plane Vector)",img:"vec2carplane"},{name:"Minimum Distance between 2 lines (dist2l)",purpose:"Determines minimum distance between two lines",syntax:"dist2l(Line Vector 1, Line Vector 2)",img:"dist2l"},{name:"Minimum Distance between 2 planes (dist2pl)",purpose:"Determines minimum distance between two planes",syntax:"dist2pl(Plane Cartesian 1, Plane Cartesian 2)",img:"dist2pl"},{name:"Minimum Distance between line and plane (distlpl)",purpose:"Determines the minimum distance between a plane and line",syntax:"distlpl(Line Vector, Plane Cartesian)",img:"distlpl"},{name:"Minimum Distance between line and point (distlp)",purpose:"Determines minimum distance between a line and point",syntax:"distlp(Line Vector, Point)",img:"distlp"},{name:"Minimum Distance between plane and point (distplp)",purpose:"Determines minimum distance between a plane and point",syntax:"distlp(Plane Equation, Point)",img:"distplp"},{name:"Intersection between 2 lines (ints2l)",purpose:"Determines the point of intersection & angle between two lines",syntax:"ints2l(Line Vector 1, Line Vector 2)",img:"ints2l"},{name:"Intersection between 2 planes (ints2pl)",purpose:"Determines the line of intersection & angle between two planes",syntax:"ints2pl(Plane Cartesian 1, Plane Cartesian 2)",img:"ints2pl"},{name:"Intersection between plane and line (intslpl)",purpose:"Determines the point of intersection & angle between line and plane",syntax:"intslpl(Line Vector, Plane Cartesian)",img:"intslpl"},{name:"Create line with 2 points (line2p)",purpose:"Determines the equation of a line given two points",syntax:"line2p(Point 1, Point 2)",img:"line2p"},{name:"Create line with direction vector and point (linedp)",purpose:"Determines the equation of a line given a direction vector and point",syntax:"linedp(Direction Vector, Point)",img:"linedp"},{name:"Create plane with 3 points (plane3p)",purpose:"Determines the equation of a plane given three points",syntax:"plane3p(Point 1, Point 2, Point 3)",img:"plane3p"},{name:"Create plane with normal and point (planenp)",purpose:"Determines the equation of a plane given a normal vector and a point",syntax:"planenp(Normal Vector, Point)",img:"planenp"},{name:"Plane formed by intersecting lines (planeintl)",purpose:"Determines the equation of the plane formed by two intersecting lines",syntax:"planeintl(Line Vector 1, Line Vector 2)",img:"planeintl"}],[{name:"Sample Mean Confidence Interval (confint)",purpose:"Determines the confidence interval for the sample mean",syntax:"confint(Sample Mean, Population Standard Deviation, Sample Size, . confidence)",img:"confint_sm"},{name:"Hypothesis Testing (hyptest)",purpose:"Determines whether the null hypothesis should be rejected by calculating p-values",syntax:"hyptest() (You will be prompted for inputs)",img:"hyptest"},{name:"Probability of Error (prerror)",purpose:"Determines the probability of Type I and Type II errors occuring",syntax:"prerror() (You will be prompted for inputs)",img:"prerror"},{name:"p-value (pval)",purpose:"Determines the p-value of a hypothesis test",syntax:"pval() (You will be prompted for inputs)",img:"pval"}]],["Calculus","Complex Numbers","Kinematics","Vectors","Linear Algebra","Probability"],["intsolve","ccondpr","normsolve","dcondpr","arclength","surfarea","ca","graphinfo","tsolve","invints"],[[{function:"One integral given, find transformed integral",syntax:"intsolve({lower1,upper1, value1}, {transformations}, {lower2, upper2})"},{function:"Two integrals given, find untransformed integral",syntax:"intsolve({lower1, upper1, value1}, {lower2, upper2, value2}, {lower3, upper3})"},{function:"Two integrals given, find transformed integral",syntax:"intsolve({lower1, upper1, value1, lower2, upper2, value2}, {transformations}, {lower3, upper3})"}],[{function:"Probability density function",syntax:"ccondpr(Probability Density Function, Lower Bound, Upper Bound, Condition 1, Condition 2)"},{function:"Normal Distribution",syntax:"ccondpr(Blank String, Mean, Standard Deviation, Condition 1, Condition 2)"}],[{function:"Both Lower and Upper given",syntax:"normsolve(Lower, Probability of Lower, Upper, Probability of Upper)"},{function:"Lower and Mean given",syntax:"normsolve(Lower, Probability of Lower, Mean, Blank String)"},{function:"Lower and Standard Deviation given",syntax:"normsolve(Lower, Probability of Lower, Blank String, Standard Deviation)"},{function:"Upper and Mean given",syntax:"normsolve(Mean, Blank String, Upper, Probability of Upper)"},{function:"Upper and Standard Deviation given",syntax:"normsolve(Blank String, Standard Deviation, Upper, Probability of Upper)"}],[{function:"Binomial Distribution",syntax:"dcondpr(number of trials, probability of success, condition 1, condition 2)"},{function:"Discrete Probability Table",syntax:"dcondpr({List containing outcomes}, {List containing probabilities}, condition 1, condition 2)"},{function:"Probability Mass Function",syntax:"dcondpr({List containing outcomes}, PMF, condition 1, condition 2)"}],[{function:"Function",syntax:"arclength(Function, Variable, Lower Bound, Upper Bound)",cases:2},{function:"Parametric Equation",syntax:"arclength(Vector, Variable, Lower, Upper)"}],[{function:"Function of x rotated about x-axis",syntax:"surfarea(Function, Variable, Lower Bound, Upper Bound)"},{function:"Function of y rotated about y-axis",syntax:"surfarea(Function, Variable, Lower Bound, Upper Bound)"},{function:"Function of x rotated about y-axis",syntax:"surfarea(Function, y, x-lower, x-upper)"},{function:"Parametric Equation",syntax:"surfarea(Function, t, Lower Bound, Upper Bound)"}],[{function:"One Variable",syntax:"surfarea(Function, t, Lower Bound, Upper Bound)"},{function:"Multiple Variables (Up to 5)",syntax:"ca(Ans, {var1, var2,..., var5}"}],[{function:"Restricted Domain",syntax:"graphinfo(Function, Variable, Lower Bound, Upper Bound)"},{function:"Across Maximal Domain",syntax:"graphinfo(Function, Variable, Blank String, Random Character)"}],[{function:"Trigonometric Equation",syntax:"tsolve(Equation, Variable, Lower Bound, Upper Bound)"},{function:"Trigonometric Inequality",syntax:"tsolve(Inequality, Variable, Lower Bound, Upper Bound)"}],[{function:"Square Root",syntax:"invints(function, number of intersections with inverse)"},{function:"Parabola",syntax:"invints(function, number of intersections with inverse) *You will be prompted to enter an initial condition"},{function:"Exponential",syntax:"invints(function, number of intersections with inverse)"},{function:"Logarithm",syntax:"invints(function, number of intersections with inverse)"},{function:"Hyperbola",syntax:"invints(function, number of intersections with inverse)"},{function:"Simple Cubic (Either 0 or 1 turning points)",syntax:"invints(function, number of intersections with inverse)"},{function:"Complicated Cubic (More than 1 turning point)",syntax:"invints(function, number of intersections with inverse) *You will be prompted to enter the domain"}]]]}class Le extends le{constructor(e){super(),ce(this,e,ye,_e,re,{})}}export{Le as component};
